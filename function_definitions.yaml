web_search_qa_perplexity: |
  {
    "name": "web_search_qa_perplexity",
    "description": "Calls an always up-to-date online LLM to perform a web search and answer the question based on what the LLM knows and recent information from the web.",
    "parameters": {
      "type": "object",
      "properties": {
        "question": {
          "type": "string",
          "description": "The question to be answered."
        }
      },
      "required": ["question"]
    }
  }

web_search_brave: |
  {
    "name": "web_search_brave",
    "description": "Search the Web using Brave Search API.",
    "parameters": {
      "type": "object",
      "properties": {
        "q": {
          "type": "string",
          "description": "The search query. Maximum of 400 characters and 50 words in the query. You can also optimize your search query by using  search operators. -: Returns web pages not containing the specified term neither in the title nor the body of the page. Example: to search web pages containing the keyword 'office' while avoiding results with the term 'Microsoft', type 'office -microsoft'. \"\": Returns web pages containing only exact matches to your query. Example: to find web pages about Harry Potter only containing the keywords 'order of the phoenix' in that exact order, type 'harry potter \"order of the phoenix\"'. You can use logical operators AND, OR and NOT in combination with search operators."
        },
        "freshness": {
          "type": "string",
          "description": "The freshness of the search results. Can be 'pd' (past day), 'pw' (past week), 'pm' (past month), 'py' (past year), 'YYYY-MM-DDtoYYYY-MM-DD' (custom date range)."
        }
      },
      "required": [
        "q"
      ]
    }
  }

get_document: |
  {
    "name": "get_document",
    "description": "Get the full text of a document that has already been produced by a worker. Documents are in JSON format an contain a human readable text in Mardown format in the `markdown` field.",
    "parameters": {
      "type": "object",
      "properties": {
        "document_name": {
          "type": "string", 
          "description": "The name of the document to be retrieved."
        }
      },
      "required": ["document_name"]
    }
  }

set_document: |
  {
    "name": "set_document",
    "description": "Set the full text of a document. Documents are in JSON format an contain a human readable text in Mardown format in the `markdown` field. The function returns what workers use this document as input and whether a new document has been created or an existing one has been overwritten. When a document is set it will also be displayed for the user, just as if display_document was called afterwards.",
    "parameters": {
      "type": "object",
      "properties": {
        "document_name": {
          "type": "string",
          "description": "The name of the document to be set. If the document does not exist, it will be created. If it exists then it will be overwritten."
        },
        "document_json": {
          "type": "string",
          "description": "The JSON representation of the document to be set. The document must be in JSON format and contain a human readable text in Mardown format in the `markdown` field."
        }
      },
      "required": [
        "document_name",
        "document_json"
      ]
    }
  }

display_document: |
  {
    "name": "display_document",
    "description": "Display the full text of a document in a user-friendly way.",
    "parameters": {
      "type": "object",
      "properties": {
        "document_json": {
          "type": "string",
          "description": "The JSON representation of the document to be displayed. The document must be in JSON format and contain a human readable text in Mardown format in the `markdown` field."
        }
      },
      "required": ["document_json"]
    }
  }

list_all_procuded_documents: |
  {
    "name": "list_all_procuded_documents",
    "description": "List all the documents that have been produced by a worker."
  }

choose_next_worker: |
  {
    "name": "choose_next_worker",
    "description": "Select which worker should be used next. It will then be started, given all all the inputs and it will be used to produce its output",
    "parameters": {
      "type": "object",
      "properties": {
        "worker_name": {
          "type": "string",
          "description": "The name of the worker to be used next."
        }
      },
      "required": ["worker_name"]
    }
  }
